//Arrays - Use values in spreadsheet!
var schedule = [];

var toX = [];

var toY = [];

var toZ = [];

var rotate = [];

var anim = [];

var delay = [];

//Settings - Player can adjust, if you know what you're doing...

var timesync = true; //If enabled, NPC will check for anomalies, such as if the /time set command has been used, or if the NPC is a follower and to turn off/on the schedule code.

var syncInterval = 400; //How often NPC will check for anomalies, such as the /time set command, and if they are a follower.

var speed = 2; //NPC's speed.

var diagnostics = true; //NPC will talk about what they are doing as they navigate. Disable this once you're satisfied the schedule is working correctly.

//Dynamic variables - Don't tamper with these, although it probably won't matter, since they'll change as required.
var worldTime = 0;
var lastTime = 0;
var expectTime = 0;
var id = 0; //The start point and the active point
var end = 0;
var myX = 0;
var myY = 0;
var myZ = 0;
var isStopped = false;
var isDay = true;
var lastX = 0;
var lastY = 0;
var lastZ = 0;
var startArray = 0;
var endArray = 0;
var follower = 0;
var myJob = 0;
var delayLapsed = false;


function init (event){
	worldTime = (event.npc.world.getTime() % 24000);
	lastTime = worldTime;
	
//Set some parameters
	event.npc.ai.setMovingType(0);
	event.npc.ai.setReturnsHome (false);
	event.npc.ai.setAnimation(0);
	event.npc.ai.setDoorInteract (1);
	event.npc.ai.setStandingType(1);
	
//Identify the major start and end points of the schedule array. This allows for navigating around the clock.
	for(var a = 0; a < schedule.length-1; a++){
		if (schedule[a]>-1){
		startArray = a;
		break;
		}
	}
	for(var b = schedule.length-1; b > -1; b--){
		if (schedule[b]>-1){
		endArray = b;
		break;
    }
}
if(diagnostics==true){event.npc.say("The first major point in the array is " + startArray + ", and the end is " + endArray + ".");}

//Boot up the schedule checker.
	event.npc.timers.stop(1);
	event.npc.timers.start(1,1,false);

//Boot up the /time set checker.	
	if(timesync == true){
		event.npc.timers.stop(0);
		event.npc.timers.start(0,syncInterval,false);
	}
} //end init event

//Check if NPC is held up due to fighting.
function target (event){
	isStopped = true;
}

function targetLost (event){
	isStopped = false;
}

function timer (event){
//Timesync, if enabled. Corrects schedule if /time set command used.

	if (event.id == 0){
//Is the NPC not a follower, but only check if Follower (2) is the NPC's role.
		if(event.npc.getRole()!=null){
			myJob = event.npc.getRole().type;
		}
		else{
			myJob = 0;
		}
		if(myJob==2){
			follower = event.npc.getRole().getDays();	
		}
		else{
			follower = 0;
		}

		if(follower==0){
			worldTime = (event.npc.world.getTime() % 24000);
			if (lastTime >= 24000-syncInterval){
				expectTime = (lastTime - 24000 + syncInterval);
			}
			else{
				expectTime = lastTime + syncInterval;
			}
			if(diagnostics==true){event.npc.say("The correct time is " + worldTime + ", and the last checked time was " + lastTime + ", and the expected time is " + expectTime + ".");}
//Has time not what it is expected to be?		
			if(!(expectTime <= worldTime + 1 && expectTime >= worldTime - 1)){
				if(diagnostics==true){event.npc.say("What the wormhole? The time just changed!");}
				event.npc.timers.stop(1);
				event.npc.timers.start(1,1,false);		
			}
			lastTime = worldTime;
		}
//The NPC is following.
		else{
			event.npc.ai.setAnimation(0);
			event.npc.ai.setStandingType(0);	
		}
		event.npc.timers.stop(0);
		event.npc.timers.start(0,syncInterval,false);
    } //end timer 0 events
    
//Timer to check schedule at major points
    if (event.id == 1){
//Is the NPC not an active follower?
		if(event.npc.getRole()!=null){
		myJob = event.npc.getRole().type;
		}
		else{
		myJob = 0;
		}
		if(myJob==2){
			follower = event.npc.getRole().getDays();	
		}
		else{
			follower = 0;
		}
		if(follower==0){
//Work out NPC's schedule.
			worldTime = (event.npc.world.getTime() % 24000);
    	    for(var c = schedule.length-1; c > -2; c--){
		        if (schedule[c] < worldTime && schedule[c]>-1){
					id= c;
					break;
		        }
		        if (schedule[c]>-1){
					end = c;
        		}
	        }
//Check if the NPC is working around the clock
        if (id >= endArray){
			end = startArray;
        }
        if (id == -1){
			id = endArray;
        }    
		if(diagnostics==true){event.npc.say("The time is " + worldTime + ", the current scheduled time is " + schedule[id] + ", and the next scheduled time is " + schedule[end] + ".");}
    
//Start timer 1 proportionate to time remaining.
		event.npc.timers.stop(1);
		if(end>id){
			event.npc.timers.start(1,schedule[end]-worldTime,false);
		}
		else{
			event.npc.timers.start(1,24000-worldTime+schedule[end],false); 
		}
		event.npc.timers.stop(2);
		event.npc.timers.start(2,1,false);
		}
//The NPC is following.
		else{
			event.npc.ai.setAnimation(0);
			event.npc.ai.setStandingType(0);
			event.npc.timers.stop(1);
			event.npc.timers.stop(2);
		}
        
    } //End timer 1 events
    
//Timer 2 - For managing navigation
    if (event.id == 2){
        myX = event.npc.getBlockX();
        myY = event.npc.getBlockY();
        myZ = event.npc.getBlockZ();
        if(diagnostics==true){event.npc.say("My current location is " + myX + ", " + myY + ", " + myZ + ".");}
		
//Does the NPC have a reason for not moving?   
		if(isStopped==true){
			event.npc.timers.stop(2);
			event.npc.timers.start(2,40,false);
		}
//The NPC has no reason for standing still.
		else{
//Is the NPC at a marker?
			if(myX == toX[id] && myY <= toY[id] + 2 && myY >= toY[id] - 2 && myZ == toZ[id]){
//Is this the end point? 
				if (id == end){
					event.npc.ai.setStandingType(1);
					event.npc.ai.setAnimation(anim[id]);
					event.npc.setRotation(rotate[id]);
					event.npc.setPosition(toX[id]+0.5,toY[id]+0.5,toZ[id]+0.5);
					lastX = 0; lastY= 0 ; lastZ = 0;
					event.npc.timers.stop(2);
					event.npc.say("This is the end point.");
				}
//This is not an end point.
				else{

//Is there a delay assigned to this point, or has the delay run its course?
					if(delay[id]==0||delayLapsed==true){
						if(diagnostics==true){event.npc.say("I'm at a point, and on to the next.");}
//Is the next id around the clock? (Is the next id tomorrow?)
							if(id+1>=schedule.length){
								id = 0;
							}
//The next id is next in sequence.
							else{
								id = id+1;
							}
							event.npc.navigateTo(toX[id],toY[id],toZ[id],speed);
							lastX = myX; lastY= myY ; lastZ = myZ;
							delayLapsed = false;
							event.npc.ai.setAnimation(0);
							event.npc.timers.stop(2);
							event.npc.timers.start(2,40,false);
						}
//There is a delay. Apply animation, rotation, etc, as if at major point.
						else{
							event.npc.ai.setStandingType(1);
							event.npc.ai.setAnimation(anim[id]);
							event.npc.setRotation(rotate[id]);
//							event.npc.setPosition(toX[id]+0.5,toY[id]+0.5,toZ[id]+0.5);
							event.npc.timers.stop(2);
							event.npc.timers.stop(3);
							event.npc.timers.start(3,delay[id],false);
						}	
					}
				}
//The NPC is not at a marker.
			else{
//Is the NPC navigating? (Note - this is hit and miss.)
				isNav = event.npc.isNavigating();
				
				if(isNav==true){
					event.npc.timers.stop(2);
					event.npc.timers.start(2,40,false);
					if(diagnostics==true){event.npc.say("I'm travelling between points.");}
				}
//The NPC is not navigating.
				else{
//Is the NPC stuck?
					if (myX==lastX && myY <= lastY + 1 && myY >= lastY - 1  && myZ == lastZ){
						lastX = 0;
						lastY = 0;
						lastZ = 0;
						event.npc.setPosition(toX[id],toY[id],toZ[id]);
						if(diagnostics==true){event.npc.say("I'm stuck... teleport!");}
						event.npc.timers.stop(2);
						event.npc.timers.start(2,1,false);
					}  
//The NPC is not stuck.
					else{
					lastX = myX; lastY= myY ; lastZ = myZ;
					event.npc.navigateTo(toX[id],toY[id],toZ[id],speed);
					event.npc.ai.setAnimation(0);
					event.npc.timers.stop(2);
					event.npc.timers.start(2,40,false);
					if(diagnostics==true){event.npc.say("I should be navigating, but I wasn't. Now I am.");}
					}     
				}
			}
		}
	}
//Timer 3 - Handles planned delays at nav points.
	if (event.id == 3){
		delayLapsed = true;
		event.npc.timers.stop(2);
		event.npc.timers.start(2,1,false);
	}
} //end timer events

//Current problems - Can't have a path that returns to itself without a timed point within the loop. 
//Setting rotation whilst in certain animations (namely sleeping) doesn't work.
//Need to mount NPCs to furniture properly. I've made improvements, but true mounting doesn't seem possible.
//Now checks if NPC is following, disables various parts of code if so.